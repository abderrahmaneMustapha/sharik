# Generated by Django 3.1.1 on 2020-09-27 14:23

import api.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, null=True, verbose_name='username')),
                ('first_name', models.CharField(max_length=150, null=True, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, null=True, verbose_name='last name')),
                ('date_birth', models.DateField(null=True, verbose_name='date of birth')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email adress')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, null=True, region=None, verbose_name='phone number')),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female')], default=1, null=True, verbose_name='Gender')),
                ('description', models.TextField(verbose_name='a short description')),
                ('univ_key', models.CharField(max_length=300, null=True, unique=True, verbose_name='University key')),
                ('adress', models.CharField(max_length=500, null=True, verbose_name='adress')),
                ('city', models.CharField(max_length=500, null=True, verbose_name='Wilaya in algeria')),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='users/profile_pics', validators=[api.validators.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp', 'svg'])], verbose_name='profile pic')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Member',
                'verbose_name_plural': 'Members',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, verbose_name='event name')),
                ('slug', models.SlugField(verbose_name='event slug')),
                ('description', models.TextField(max_length=300)),
                ('position', models.CharField(max_length=200, verbose_name='event place,  city or country')),
                ('start_at', models.DateField(verbose_name='event starting date')),
                ('end_at', models.DateField(verbose_name='event ending date')),
                ('status', models.IntegerField(choices=[(1, 'Post'), (2, 'Current'), (3, 'Up Comming')], default=1, verbose_name='Event statu')),
                ('profile_pic', models.ImageField(upload_to='users/profile_pics', validators=[api.validators.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp', 'svg'])], verbose_name='profile pic')),
                ('is_accepted', models.BooleanField(verbose_name=' accept this event')),
                ('archived', models.BooleanField(verbose_name='archive this event')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='event creator')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, verbose_name='tag name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='UserLevels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='username')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserJoinResquest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='event description')),
                ('pictures', models.ImageField(upload_to='users/profile_pics', validators=[api.validators.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp', 'svg'])], verbose_name='profile pic')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.event', verbose_name='event')),
                ('request_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='the user who want join this event')),
            ],
        ),
        migrations.CreateModel(
            name='EventPictures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pictures', models.ImageField(upload_to='users/profile_pics', validators=[api.validators.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp', 'svg'])], verbose_name='profile pic')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.event', verbose_name='event')),
            ],
        ),
        migrations.AddField(
            model_name='member',
            name='level',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.userlevels', verbose_name='user study level and field'),
        ),
        migrations.AddField(
            model_name='member',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
